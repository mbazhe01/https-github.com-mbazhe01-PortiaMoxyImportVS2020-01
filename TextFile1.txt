    private void buttonMoxyToAIM_Click(object sender, EventArgs e)
        {
            //SQLiteDatabase db;
            string outFolder = string.Empty;
            string axysPath = string.Empty;
            string srcFile = string.Empty;                       // the folder where Moxy Export saves moxyaxys.trn file 
            string fileName = string.Empty;                      // source file name only, No path  
            string dbConn = string.Empty;                        // Moxy database connection
            string dbConnPortia = string.Empty;                  // Portia database connection
            string dbConnBilling = string.Empty;                 // BillingWarehouseProtrak database connection
            string tradingCurrencyStoredProc = string.Empty;     // stored procedure to retrieve protfolio's trading currency
            string reportingCurrencyStoredProc = string.Empty;   // stored procedure to retreive portfolio's reporting currency
            string lastCrossRateStoredProc = string.Empty;
            string postToAxys = string.Empty;                    // Y or N; indicates if it's necessary to post trades to Axys
            //int rtn = 0;
            string tradeCur = string.Empty;                      // portfolio trading currency as defined in Protrak
            string crossRate = string.Empty;                     // trades cross rate for non-us based portfolios
            int count = 0;
            string newLine = string.Empty;
            string securityCur = string.Empty;                   // the currency of the traded security

            Globals.errCnt = 0;                                                         // reset error counter

            tbScreen.Clear();

            MetaData  mData = getAppMetaDataMoxy();

            if (getAppMetaData(ref outFolder, ref axysPath, ref srcFile, ref dbConn, ref postToAxys, ref tradingCurrencyStoredProc, ref dbConnPortia, ref lastCrossRateStoredProc, ref reportingCurrencyStoredProc) == -1) { return; }

            //
            // check if the source file exists moxyaxys.trn
            //
            if (!File.Exists(srcFile)) { MessageBox.Show(String.Format("File {0} not found please run Moxy Export", srcFile)); return; }
            //
            // make a copy of binary source file
            //
            String newSrcFile = Path.GetFileNameWithoutExtension(srcFile) + "_" + DateTime.Now.ToString("yyyyMMdd") + "_" + DateTime.Now.ToString("hhmmss") + ".trn";
            File.Copy(srcFile, outFolder + newSrcFile, true);

            // 
            // execute imex to export source file
            //
            runImexExport(outFolder, axysPath, srcFile);
            fileName = Path.GetFileName(srcFile);

            //
            // rename the file to make it CSV and dated
            //              
            //
            // after the test remove time stamp
            //
            String newFile = Path.GetFileNameWithoutExtension(outFolder + fileName) + "_" + DateTime.Now.ToString("yyyyMMdd") + "_"+ DateTime.Now.ToString("hhmmss") + ".csv";

            if (File.Exists(outFolder + fileName))
            {

                try
                {
                    File.Copy(outFolder + fileName, outFolder + newFile, true); // this is an initial csv file that we update down the code to fit AIM specs
                    tbScreen.AppendText("Finished export of " + srcFile + Environment.NewLine);
                    tbScreen.AppendText("Check for the output in: " + outFolder + Environment.NewLine);
                    tbScreen.AppendText("File: " + newFile);


                    MoxyDatabase md = new MoxyDatabase(dbConn, tbScreen);
                    PortiaDatabase pd = new PortiaDatabase(dbConnPortia, tbScreen, tradingCurrencyStoredProc, lastCrossRateStoredProc);

                    if (unfoldSpecificLots(outFolder + newFile) == -1)
                    {
                        return;
                    }

                    string[] lines = File.ReadAllLines(outFolder + newFile);
                    List<string> newLines = new List<string>();

                    // process Moxy trades file line by line
                    foreach (string line in lines)
                    {

                        Application.DoEvents();

                        // this is a comment line - ignore
                        if (line.IndexOf(";,;,") != -1 || line.IndexOf(",;,") != -1 || line.IndexOf(";;") !=-1) { continue; }
                                             
                        count += 1;
                        lblStatus.Text = String.Format("Processing trade: {0}", count);
                        ///////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                           //
                        // analyze & format trades for AIM                                                           //    
                        //                                                                                           //
                        ///////////////////////////////////////////////////////////////////////////////////////////////
                        Trade trade = new Trade(tbScreen, line, dbConn , dbConnPortia, tradingCurrencyStoredProc , lastCrossRateStoredProc, reportingCurrencyStoredProc  );
                        trade.convert();
                        
                        newLine = String.Join(",", trade.items);
                        if (!trade.doNotInclude)
                        {
                            newLines.Add(newLine);
                        }
                        else
                        {

                            tbScreen.AppendText(String.Format("\r\n-!-!-!-> Excluded cash trade - port & sec currency are the same. : {0}", newLine));
                        }
                        

                    } // end of foreach

                    File.WriteAllLines(outFolder + newFile, newLines);
                    //
                    // when count > 0 the output file is not empty
                    //      1. copy source file (moxyaxys.trn) to Axys Folder where post32.exe can see it
                    //      2. run post32.exe 
                    //

                    // && postToAxys.ToUpper().Equals ('Y')

                    if (count > 0 && postToAxys.ToUpper().Equals('Y'.ToString()))
                    {
                        File.Copy(outFolder + fileName, axysPath + fileName, true);
                        ProcessStartInfo PostProc = new ProcessStartInfo(axysPath + "post32.exe");
                        //PostProc.WorkingDirectory = Path.GetDirectoryName(srcFile);
                       
                        Process p2;
                        PostProc.Arguments = " -fmoxyaxys";
                        PostProc.UseShellExecute = false;
                        p2 = Process.Start(PostProc);
                        while (p2.HasExited == false)
                        {
                            Application.DoEvents();
                        }

                    }


                    // delete moxyaxys.trn
                    File.Delete(srcFile);  

                    
                }
                catch (Exception exp)
                {
                    Globals.saveErr(exp.Message);
                    Globals.WriteErrorLog(exp.ToString());
                    MessageBox.Show(exp.Message);
                    this.Close();
                    return;
                }

            }
            else
            {
                Globals.saveErr("--->Failed to create file: " + newFile);
                return;
            }

            tbScreen.AppendText(String.Format("\r\n\r\nNumber of trades: {0}", count));
            tbScreen.AppendText(String.Format("\r\n\r\nNumber of errors: {0}", Globals.errCnt.ToString()));
            lblStatus.Text = "Ready";
            Globals.init(); 


            //---------------------------TEST----------------//
            //try
            //{
            //    Trade t = new Trade(tbScreen);
            //    t.convert(); 
            //}
            //catch (Exception ex)
            //{
            //    tbScreen.AppendText(ex.Message); 
            //}


            

        }