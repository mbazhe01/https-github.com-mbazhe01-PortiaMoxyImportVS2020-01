using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.Windows.Forms;
using System.Diagnostics;

namespace PortiaMoxyImport
{
    class PortiaDatabase
    {
        public static String dbConnection;                                                  // DB connection to Portia
        //public static String dbConnectionBilling;                                       // DB connection to BillingWarehouseProtrak
        public static TextBox screen;
        public static string tradingCurrencyStoredProc = string.Empty;    // stored procedure to retrieve protfolio's trading currency
        public static string lastCrossRateStoredProc = string.Empty;

        // constructor
          public PortiaDatabase(String aDbConnection, TextBox aScreenTextBox, String aTradingCurrencyStoredProc, String aLastCrossRateStoredProc)
        {
            // constructor
            
            dbConnection = aDbConnection;
            if (String.IsNullOrEmpty(dbConnection))
            {
                Globals.saveErr("Portia DB Connection unknown.");

                throw new ArgumentNullException("Portia DB Connection"); 
            }

            tradingCurrencyStoredProc = aTradingCurrencyStoredProc;
            if (String.IsNullOrEmpty(tradingCurrencyStoredProc))
            {
                Globals.saveErr("Portia DB:  Trading Currency Stored Procedure unavailable.");

                throw new ArgumentNullException("Portia DB: Trading Currency Stored Procedure unavailable");
            }

            lastCrossRateStoredProc = aLastCrossRateStoredProc;
            if (String.IsNullOrEmpty(lastCrossRateStoredProc))
            {
                Globals.saveErr("Portia DB:  Last Cross rate Stored Procedure unavailable.");

                throw new ArgumentNullException("Portia DB: Last Cross Rate Stored Procedure unavailable");
            }

            screen = aScreenTextBox;
        } // end of constructor

        /// <summary>
          ///     Function getLastCrossRate -- gets last avilable cross rate between two currencies
          ///                                                         prior or on trade date.
        /// </summary>
        /// <param name="aISOCur1">first ISO currency</param>
        /// <param name="aISOCur2">second ISO currency</param>
        /// <param name="aTradeDate">a date of the trade</param>
        /// <param name="aCrossRate">cross rate beween first & second currenies</param>
        /// <returns>0/-1</returns>
          public static int getLastCrossRate(string aISOCur1, string aISOCur2, string  aTradeDate, ref string aCrossRate)
          {
              int rtn = 0;
              double  crossRate = 0;
              string tradeDate = string.Empty;  
              try
              {

                  //tradeDate =aTradeDate.Substring (0,2) + "/" + aTradeDate.Substring (2,2) + "/" +  aTradeDate.Substring (4,4);

                  using (SqlConnection conn = new SqlConnection(dbConnection))
                  {
                      conn.Open();

                      // 1.  create a command object identifying the stored procedure
                      SqlCommand cmd = new SqlCommand(lastCrossRateStoredProc, conn);

                      // 2. set the command object so it knows to execute a stored procedure
                      cmd.CommandType = CommandType.StoredProcedure;

                      // 3. add parameter to command, which will be passed to the stored procedure
                      cmd.Parameters.Add(new SqlParameter("@cur1", aISOCur1));
                      cmd.Parameters.Add(new SqlParameter("@cur2", aISOCur2));
                      cmd.Parameters.Add(new SqlParameter("@tradedate", DateTime.Parse( aTradeDate.Substring(0,2) + "/" + aTradeDate.Substring(2,2) + "/" + aTradeDate.Substring  (4, 4)   )));

                      // execute the command
                      using (SqlDataReader rdr = cmd.ExecuteReader())
                      {
                          // iterate through results, printing each to console
                          while (rdr.Read())
                          {

                              crossRate =Double.Parse(rdr[0].ToString());

                              if (crossRate != 0)
                              {
                                  aCrossRate =Math.Round ( crossRate, Globals.RNDNUM) .ToString();
                                  screen.AppendText( String.Format("\r\nFound last cross rate in Portia {2} for {0}/{1} trade date {3} ", aISOCur1, aISOCur2, aCrossRate, aTradeDate ));
                              }
                            
                            
                          } // end of while loop

                       

                      } // end of using SQLReader


                  } // end of SQLConnection using

              }
              catch (Exception e)
              {
                  rtn = -1;
                  screen.AppendText ( Globals.saveErr(GetCurrentMethod() + ": " + e.Message + "\r\n"));
              }

              return rtn;

          }


          public int getTradingCurrency(string aTradingCurrencyStoredProc, string aPortfolio, ref string aTradingCurrency)
          {
              int rtn = 0;

              try
              {
                  using (SqlConnection conn = new SqlConnection(dbConnection))
                  {
                      conn.Open();

                      // 1.  create a command object identifying the stored procedure
                      SqlCommand cmd = new SqlCommand(aTradingCurrencyStoredProc, conn);

                      // 2. set the command object so it knows to execute a stored procedure
                      cmd.CommandType = CommandType.StoredProcedure;

                      // 3. add parameter to command, which will be passed to the stored procedure
                      cmd.Parameters.Add(new SqlParameter("@portfolio", aPortfolio));
                                       

                      // execute the command
                      using (SqlDataReader rdr = cmd.ExecuteReader())
                      {
                          // iterate through results, printing each to console
                          while (rdr.Read())
                          {
                              aTradingCurrency = rdr[0].ToString();
                           
                              if (string.IsNullOrWhiteSpace(aTradingCurrency))
                                  screen.AppendText(Globals.saveErr( String.Format("\r\n " +GetCurrentMethod()+  ":Can not retrieve trading currency for portfolio : {0} .", aPortfolio)));
                              else
                                  screen.AppendText(String.Format("\r\nFound trading currency {0} for : {1} ", aTradingCurrency, aPortfolio));
                          } // end of while loop
                      } // end of using
                  } // end of outter using
              } // end of try
              catch (Exception e)
              {
                  rtn = -1;
                  screen.AppendText(Globals.saveErr(GetCurrentMethod() +": " + e.Message + "\r\n"));
              }

              return rtn;
          } // end of getTradeCurrency()

          public static string GetCurrentMethod()
          {
              StackTrace st = new StackTrace();
              StackFrame sf = st.GetFrame(1);

              return sf.GetMethod().Name;
          }
    } // end of lass
} // end of namespace
