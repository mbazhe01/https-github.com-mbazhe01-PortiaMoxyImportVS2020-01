using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Reflection;
using System.Diagnostics;

namespace PortiaMoxyImport
{
    class TradeFX : Trade
    {

       
        protected String broker;
        protected String tradeDate;
        /// <summary>
        ///     Constructor - reuse constractor from Trade class
        /// </summary>
        /// <param name="aScreen">textbox used as output</param>
        /// <param name="aLine">string containing a fx trade</param>
        /// <param name="aDbConnMoxy">connection to Moxy Database</param>
        /// <param name="aDbConnPortia">connection to Portia database</param>
        /// <param name="aTradingCurrencySP">portfolio's trading currency</param>
        /// <param name="aLastCrossRateSP">last availabel cross rate from Portia</param>
        public TradeFX(TextBox aScreen, string aLine, string aDbConnMoxy, string aDbConnPortia, string aTradingCurrencySP, string aLastCrossRateSP, FCTrades aFcTrades)
            : base(aScreen, aLine, aDbConnMoxy, aDbConnPortia, aTradingCurrencySP, aLastCrossRateSP)
        {
          
            //
            // replace first char 7 side with 2 side if necessary
            //
            if (items[0].ToString()[0] == '7')
            {
                items[0] = '2'.ToString() + items[0].ToString().Remove(0, 1);
            }


            // get broker & trade date from fc trade
            broker = aFcTrades.getBrokerForTrade(String.Join(",", items), ref tradeDate );

            if (items[0].IndexOf("fc") != -1)
            {
                items[0] = items[0].Replace("fc", string.Empty);
            }

            // based on these values the appropriate conversion function selected
            if (items[4].Equals("cash")) { tranType = "fxcash"; } else { tranType = "fxequity"; }

            // cash transactions only will be included in the AIM file
            if (!tranType.Equals("fxcash")) {
                this.doNotInclude = true; 
            }
            
            if (tradeCur.Equals("USD")) { portType = "Us"; } else { portType = "NonUs"; }
            if (securityCur.Equals(tradeCur)) { secType = "SameCur"; } else { secType = "DiffCur"; }
            if ((items[1].Equals("sl") || items[1].Equals("SL") || items[1].Equals("ss"))) { tranCode = "Sell"; } else { tranCode = "Buy"; }

           
        

        }// end of constractor

        /// <summary>
        ///  1. fxcashNonUsDiffCurBuy 
        /// </summary>
        /// <returns></returns>
        ///  fxcashNonUsDiffCurBuy
        public int fxcashNonUsDiffCurBuy()
        {
            int rtn = 0;
            Double qtyNum = 0, tradeAmt = 0, sec2Port = 0;
            //sec2Base =0, 
            String secType = items[3];
            String cur1 = null, cur2 = null;
            Boolean flip = false;


            Screen.AppendText(String.Format(" Executing {0} ", GetCurrentMethod()));

            // replace Moxy src & dest symbols with Portia format like -CAD CASH-
            rtn = md.convertSymbolToPortiaFwdCash(ref items[3], ref items[4]);
            rtn = md.convertSymbolToPortiaFwdCash(ref items[11], ref items[12]);

            items[5] = tradeDate;

            //if (castToTradingCurrency(tradeCur, ref items) == -1) { return -1; }
                                         
            // set broker from fx trade 
            items[24] = broker;

            md.getISOCurrency(items[3], ref cur1);
            md.getISOCurrency(items[11], ref cur2);
            rtn = md.flipRate(cur1, cur2, ref flip);

            if (flip)
            {
                // sec2port
                if (Double.TryParse(items[13], out sec2Port))
                {

                    sec2Port = 1 / sec2Port;
                    items[13] = Math.Round((sec2Port), Globals.RNDNUM).ToString();
                }

            }

            // Sec2Port
           // items[13] = ;
           
            // sec2base 
            //if (securityCur.Equals("USD")) { items[14] = "1"; } else { items[14] = string.Empty; }
              

            // sec2cbal
            if (Double.TryParse(items[8], out qtyNum) && Double.TryParse(items[17], out tradeAmt))
            {
                items[15] = Math.Round((qtyNum / tradeAmt), Globals.RNDNUM).ToString();
            }
           

            return rtn;
        }

        /// <summary>
        ///  2.   reformats fwd currency cash sell to Portia format
        /// </summary>
        /// <returns></returns>
        public int fxcashNonUsDiffCurSell()
        {
            int rtn = 0;

            Double qtyNum = 0, tradeAmt = 0;
            Double    sec2Port=0;
            String secType = items[3];
            Boolean flip = false;
            String cur1 = null, cur2 = null;
            Screen.AppendText(String.Format(" Executing {0} ", GetCurrentMethod()));
            // replace Moxy src & dest symbols with Portia format like -CAD CASH-
            rtn = md.convertSymbolToPortiaFwdCash(ref items[3], ref items[4]);
            rtn = md.convertSymbolToPortiaFwdCash(ref items[11], ref items[12]);
            //origTradeAmt = Double.Parse(items[17]);
            // swap src dest symbols
           
            items[5] = tradeDate;

            // set broker from fx trade 
            items[24] = broker;


            md.getISOCurrency(items[3], ref cur1);
            md.getISOCurrency(items[11], ref cur2);
            rtn = md.flipRate(cur1, cur2, ref flip);
            if (flip)
            {
                // sec2port
                if (Double.TryParse(items[13], out sec2Port))
                {

                    sec2Port = 1 / sec2Port;
                    items[13] = Math.Round((sec2Port), Globals.RNDNUM).ToString();
                }

            }
           

            // replace sell with buy with trading currency
            items[1] = "by";
            string tmp = items[3];
            string tmp2 = items[4];
            items[3] = items[11];
            items[4] = items[12];
            items[11] = tmp;
            items[12] = tmp2;

            tmp = items[8];
            items[8] = items[17];
            items[17] = tmp;

            // sec2port
            if (Double.TryParse(items[13], out sec2Port))
            {

                sec2Port = 1 / sec2Port;
                items[13] = Math.Round((sec2Port), Globals.RNDNUM).ToString();
            }

           


            // Sec2Port
            md.getISOCurrency(items[3], ref cur1);
            if (cur1.Equals(this.tradeCur))
            {
                items[13] = "1";
            }
            else
            {
                if (Double.TryParse(items[13], out sec2Port))
                {

                    sec2Port = 1 / sec2Port;
                    items[13] = Math.Round((sec2Port), Globals.RNDNUM).ToString();
                }
            }



            // sec2cbal
            if (Double.TryParse(items[8], out qtyNum) && Double.TryParse(items[17], out tradeAmt))
            {
                items[15] = Math.Round((qtyNum / tradeAmt), Globals.RNDNUM).ToString();
            }

            return rtn;
        }


        public int fxcashUsDiffCurBuy()
        {
            int rtn = 0;
            //Double qtyNum = 0, tradeAmt = 0, sec2Base = 0;
            Double    sec2Port = 0;
            String secType = items[3];
            String cur1=null, cur2=null;


            Boolean flip= false ;
            Screen.AppendText(String.Format(" Executing {0} ", GetCurrentMethod()));

            // replace Moxy src & dest symbols with Portia format like -CAD CASH-
            rtn = md.convertSymbolToPortiaFwdCash(ref items[3], ref items[4]);
            rtn = md.convertSymbolToPortiaFwdCash(ref items[11], ref items[12]);

            items[5] = tradeDate;

            // set broker from fx trade 
            items[24] = broker;

            //rtn = md.getCrossRate(0, tradeDate, tradeCur, items[3], items[0], ref crossRate, ref conversionInstruction);

            md.getISOCurrency(items[3], ref cur1);
            md.getISOCurrency(items[11], ref cur2);
            rtn = md.flipRate(cur1, cur2, ref flip);

            if (flip)
            {
                // sec2port
                if (Double.TryParse(items[13], out sec2Port))
                {
                   
                        sec2Port = 1 / sec2Port;
                        items[13] = Math.Round((sec2Port), Globals.RNDNUM).ToString();
                 }

            }

            // sec2cashbal
            items[15] = Math.Round(Double.Parse(items[8])/Double.Parse(items[17]) , Globals.RNDNUM).ToString();

          


            return rtn;

        }//end of fxcashUsDiffCurBuy

        public int fxcashUsDiffCurSell()
        {
            int rtn = 0;
            //Double qtyNum = 0, tradeAmt = 0, sec2Base = 0;
            Double    sec2Port = 0;
            String secType = items[3];           
            Boolean flip = false;
            String cur1 = null, cur2 = null;
            Screen.AppendText(String.Format(" Executing {0} ", GetCurrentMethod()));

            // replace Moxy src & dest symbols with Portia format like -CAD CASH-
            rtn = md.convertSymbolToPortiaFwdCash(ref items[3], ref items[4]);
            rtn = md.convertSymbolToPortiaFwdCash(ref items[11], ref items[12]);

            items[5] = tradeDate;

            // set broker from fx trade 
            items[24] = broker;

            //rtn = md.getCrossRate(0, tradeDate, tradeCur, items[3], items[0], ref crossRate, ref conversionInstruction);
            md.getISOCurrency(items[3], ref cur1);
            md.getISOCurrency(items[11], ref cur2);
            rtn = md.flipRate(cur1, cur2, ref flip);



            if (flip)
            {
                // sec2port
                if (Double.TryParse(items[13], out sec2Port))
                {

                    sec2Port = 1 / sec2Port;
                    items[13] = Math.Round((sec2Port), Globals.RNDNUM).ToString();
                }

            }




            // replace sell with buy
            // swap src dest symbols

            items [1] = "by";

            string tmp = items[3];
            string tmp2 = items[4];
            items[3] = items[11];
            items[4] = items[12];
            items[11] = tmp;
            items[12] = tmp2;

            tmp = items[8];
            items[8] = items[17];
            items[17] = tmp;

            // sec2port
            md.getISOCurrency(items[3], ref cur1);
            if (cur1.Equals(this.tradeCur))
            {
                items[13] = "1";
            }
            else
            {
                if (Double.TryParse(items[13], out sec2Port))
                {

                    sec2Port = 1 / sec2Port;
                    items[13] = Math.Round((sec2Port), Globals.RNDNUM).ToString();
                }
            }

           

            // sec2cashbal
            items[15] = Math.Round(Double.Parse(items[8]) / Double.Parse(items[17]), Globals.RNDNUM).ToString();



            return rtn;
        }


    } // end of class
}
